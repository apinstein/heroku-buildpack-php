#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
#
# Offical Docs: https://devcenter.heroku.com/articles/buildpack-api
#
# The "compile" stage allows your buildpack to prepare the slug for deployment.
# Before bin/compile is run, Heroku creates BUILD_DIR and your git repo's code is extracted there.
# After bin/compile exits, Heroku will package the contents of BUILD_DIR into the slug, and on deployment
# Heroku essentially runs cp -r BUILD_DIR/* /app/

# fail fast
set -e
trap 'echo "Last command:\n$BASH_COMMAND"' EXIT
indent() {
    sed -u 's/^/       /'
}

export LD_LIBRARY_PATH=/app/lib:$LD_LIBRARY_PATH
export PATH=/app/bin:$PATH

# config
APACHE_VERSION="2.2.23"
APACHE_PATH="apache"
MOD_FASTCGI_VERSION="2.4.6"
MOD_FASTCGI_PATH="${APACHE_PATH}/modules"
PHP_VERSION="5.3.21"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

echo "-----> Compiling app: contents of BUILD_DIR ${BUILD_DIR} will be deployed as /app"

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

echo "-----> Bundling Apache (worker/fastcgi) version $APACHE_VERSION"
APACHE_URL="http://util.cloud.tourbuzz.net.s3.amazonaws.com/heroku/builds/apache-${APACHE_VERSION}.tgz"
mkdir -p ${APACHE_PATH}
(curl --silent --max-time 60 --location "$APACHE_URL" || echo FAIL) | tar xz -C ${APACHE_PATH}
MOD_FASTCGI_URL="http://util.cloud.tourbuzz.net.s3.amazonaws.com/heroku/builds/mod_fastcgi-${MOD_FASTCGI_VERSION}.tgz"
echo $MOD_FASTCGI_URL | indent
mkdir -p ${MOD_FASTCGI_PATH}
(curl --silent --max-time 60 --location "$MOD_FASTCGI_URL" || echo FAIL) | tar xz -C ${MOD_FASTCGI_PATH}

echo "-----> Bundling PHP FPM version $PHP_VERSION"
PHP_URL="http://util.cloud.tourbuzz.net.s3.amazonaws.com/heroku/builds/php-${PHP_VERSION}.tgz"
mkdir -p ${PHP_PATH}
(curl --silent --max-time 60 --location "$PHP_URL" || echo FAIL) | tar xz -C ${PHP_PATH}
mkdir -p $BUILD_DIR/run
mkdir -p $BUILD_DIR/fcgi
ln -s /app/www $BUILD_DIR/fcgi/

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini $BUILD_DIR/php
cp $LP_DIR/conf/php-fpm.conf $BUILD_DIR/php

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
# From: https://github.com/iphoting/heroku-buildpack-php-tyler/blob/master/bin/compile
if [ -r $BUILD_DIR/php/php-fpm.conf.current ]; then
  cp -f $BUILD_DIR/php/php-fpm.conf.current $BUILD_DIR/php/php-fpm.conf
else
  cp -f $BUILD_DIR/php/php-fpm.conf $BUILD_DIR/php/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
# From: https://github.com/iphoting/heroku-buildpack-php-tyler/blob/master/bin/compile
for var in `env | cut -f1 -d=`; do
  echo "env[$var] = \$${var}" >> $BUILD_DIR/php/php-fpm.conf
done

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

# check if we have Composer dependencies and vendors are not bundled
if [ -f www/composer.json ] && [ ! -d www/vendor ]; then
  (curl --silent --max-time 60 --location "http://util.cloud.tourbuzz.net.s3.amazonaws.com/heroku/builds/subversion-1.7.8.tgz" || echo FAIL) | tar xz -C /app
  GIT_DIR_ORIG=$GIT_DIR
  unset GIT_DIR
  echo "-----> Installing Composer dependencies"
  COMPOSER_URL="http://getcomposer.org/composer.phar"
  curl --fail --silent --max-time 60 --location -o www/composer.phar "$COMPOSER_URL"
  cd www
  ${BUILD_DIR}/php/bin/php -c $LP_DIR/conf/php.ini composer.phar install --prefer-source
  cd -
  rm www/composer.phar
  export GIT_DIR=$GIT_DIR_ORIG
fi

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/lib:$LD_LIBRARY_PATH
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/php/bin/php-cgi
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR
